% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{glop_lp}
\alias{glop_lp}
\title{R binding to the powerful GLOP linear solver}
\usage{
glop_lp(objectiveCoefs, constraintMat, constraintRHS, maximise = FALSE)
}
\arguments{
\item{objectiveCoefs}{A *named* numeric vector representing the objective coefficients (the c vector). The names are essential as GLOP insists on named variables.}

\item{constraintMat}{A numeric matrix of constraint coefficients. (the A matrix)}

\item{constraintRHS}{A vector of inequality right-hand sides (the b vector)}

\item{maximise}{Logical giving the direction of the optimization. TRUE means that the objective is to maximize the objective function, FALSE (default) means to minimize it.}
}
\value{
solution A named list of:
           'optimum' - value of the objective funtion
           'solution' - a vector of equal length to objectiveCoefs, detailing the solution
           'walltime.ms' - time taken by solved
           'is_optimal -  status flag provided by the solver
           'is_feasible' -  status flag provided by the solver (if this is false, then the solver might not be able to solve the problem at all!)
}
\description{
The primary OR-Tools linear optimization solver is Glop, Google's linear programming system. It's fast, memory efficient, and numerically stable.
}
\details{
This function provides a binding via Rcpp to the linear solver.
}
\examples{
data(StiglerDiet)

costVec <- rep(1, length(StiglerDiet$foodAvailable$Commodity)) # everything will be per dollar spent, so the cvec is all 1's
names(costVec) <- StiglerDiet$foodAvailable$Commodity # Name the variables

#Nutrient data is in amount per dollar
constraintMat <- StiglerDiet$foodAvailable[,as.matrix(.SD) ,
                                            .SDcols = !c("Commodity","Price1939","Weight","Weight_unit","Weight_value")]
                                   
row.names(constraintMat) <- StiglerDiet$foodAvailable$Commodity

objectiveVec <- StiglerDiet$nutrientRDA$RDI_value
names(objectiveVec) <- StiglerDiet$nutrientRDA$Nutrient

glopt <- glop_lp(
            objectiveCoefs = costVec,
            constraintMat = t(constraintMat[names(costVec),]),
            constraintRHS = objectiveVec[colnames(constraintMat)])


glopt$solution[glopt$solution > 0]

}
\references{
\url{https://developers.google.com/optimization/lp/glop}

\url{https://en.wikipedia.org/wiki/Linear_programming}
}
